# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running 'nixos-help').

{ config, pkgs, lib, ... }:

let
  # Define GPU type here (change to "amd" or "nvidia" depending on your GPU)
  # This variable allows easy switching between different GPU configurations
  gpuType = "nvidia";  # Changed from intel to nvidia
in
{
  imports =
    [ # Include the results of the hardware scan.
      # This file is auto-generated by nixos-generate-config and contains
      # hardware-specific settings like filesystems and kernel modules
      ./hardware-configuration.nix
    ];

  # ==================== BOOTLOADER CONFIGURATION ====================
  # Bootloader configuration for UEFI systems
  boot.loader.systemd-boot.enable = true;      # Use systemd-boot as bootloader (modern and simple)
  boot.loader.efi.canTouchEfiVariables = true; # Allow updating EFI boot variables (required for UEFI)

  # Use the latest Linux kernel for newest drivers and security updates
  boot.kernelPackages = pkgs.linuxPackages_latest;

  # Kernel parameters for better performance and functionality
  boot.kernelParams = [
    "quiet"           # Reduce boot noise by suppressing most log messages
    "splash"          # Show splash screen during boot
    "nvidia-drm.modeset=1"  # Enable NVIDIA DRM kernel mode setting for better graphics
    "nowatchdog"      # Disable hardware watchdog (can prevent system freezes)
    "tsc=reliable"    # Mark Time Stamp Counter as reliable (better timing)
    "nohibernate"     # Disable hibernation (saves memory and avoids issues)
  ];

  # Kernel modules to load in initial ramdisk for early hardware access
  boot.initrd.availableKernelModules = [
    "nvme"       # NVMe SSD support
    "xhci_pci"   # USB 3.0 controller support
    "ahci"       # SATA controller support
    "usbhid"     # USB HID devices (keyboards, mice)
    "usb_storage" # USB storage devices
    "sd_mod"     # SD card reader support
  ];

  # Load these kernel modules at boot time
  boot.kernelModules = [
    "fuse"          # Filesystem in Userspace (for SSHFS, NTFS-3G, etc.)
    "v4l2loopback"  # Virtual video device (screen recording, virtual cameras)
    "snd-aloop"     # Virtual audio device (audio routing and recording)
  ];

  # ==================== NVIDIA CONFIGURATION ====================
  hardware.nvidia = {
    # Modesetting is required for Wayland and better integration
    modesetting.enable = true;
    # Power Management (saves power on laptops, disable if causing issues)
    powerManagement.enable = true;
    # Use open-source kernel modules (NOUVEAU)? Set to false to use proprietary NVIDIA drivers.
    open = false;
    # Allow using NVIDIA Settings tool to adjust settings
    nvidiaSettings = true;
  };

  # ==================== NETWORK CONFIGURATION ====================
  networking.hostName = "nixos"; # Define your system's network name

  # Enable NetworkManager (recommended for both wired and wireless networks)
  networking.networkmanager.enable = true;

  # ==================== INTERNATIONALIZATION ====================
  # Set timezone to Copenhagen (Central European Time)
  time.timeZone = "Europe/Copenhagen";

  # Language and locale settings
  i18n = {
    # Default system language (English with UTF-8 character set)
    defaultLocale = "en_US.UTF-8";

    # List of languages to support on the system
    supportedLocales = [
      "en_US.UTF-8/UTF-8"  # English (USA) with UTF-8 encoding
      "da_DK.UTF-8/UTF-8"  # Danish added
    ];

    # Extra environment variables for fine-tuning locale settings
    extraLocaleSettings = {
      LANG = "en_US.UTF-8";        # Default language for all applications
      LC_CTYPE = "en_US.UTF-8";    # Character classification (letters, cases)
      LC_NUMERIC = "en_US.UTF-8";  # Number formatting (decimal separator, thousands separator)
      LC_TIME = "en_US.UTF-8";     # Date and time format
      LC_MONETARY = "en_US.UTF-8"; # Currency format
      LC_ADDRESS = "en_US.UTF-8";  # Address formatting
      LC_IDENTIFICATION = "en_US.UTF-8"; # Locale metadata
      LC_MEASUREMENT = "en_US.UTF-8";    # Measurement units (metric/imperial)
      LC_PAPER = "en_US.UTF-8";          # Paper size (A4 or Letter)
      LC_TELEPHONE = "en_US.UTF-8";      # Telephone number formatting
      LC_NAME = "en_US.UTF-8";           # Name formatting
    };
  };

  # Keyboard configuration for X11 (graphical interface)
  services.xserver.xkb = {
    layout = "dk";    # Danish keyboard layout
    variant = "";     # No special variant
  };

  # Keyboard configuration for virtual console (TTY)
  console.keyMap = "dk-latin1";  # Danish keyboard layout with Latin-1 encoding

  # ==================== GRAPHICAL ENVIRONMENT ====================
  # Enable X11 window system (required for most desktop environments)
  services.xserver.enable = true;

  # Enable MIME type database for file type associations
  xdg.mime.enable = true;

  # Enable KDE Plasma Desktop Environment with SDDM display manager
  services.displayManager.sddm = {
    enable = true;
    wayland.enable = true; # Enable Wayland support (next-gen display protocol)
  };

  # Enable KDE Plasma 6 desktop
  services.desktopManager.plasma6.enable = true;

  # ==================== HARDWARE SUPPORT ====================
  # Modern hardware acceleration settings
  hardware.graphics = {
    enable = true;
    enable32Bit = true;  # Enable 32-bit support (for legacy applications)

    # Graphics acceleration packages
    extraPackages = with pkgs; [
      vaapiVdpau       # VA-API implementation using VDPAU
      libvdpau-va-gl   # VDPAU driver with VA-API support
      mesa             # Open-source graphics driver
    ] ++ lib.optionals (gpuType == "nvidia") [  # NVIDIA-specific packages
      nvidia-vaapi-driver  # VA-API implementation for NVIDIA hardware
    ];

    # 32-bit versions of graphics packages
    extraPackages32 = with pkgs.pkgsi686Linux; [
      libva            # Video Acceleration API
      mesa             # Open-source graphics driver (32-bit)
    ] ++ lib.optionals (gpuType == "nvidia") [  # NVIDIA-specific 32-bit packages
      nvidia-vaapi-driver  # VA-API implementation for NVIDIA hardware (32-bit)
    ];
  };

  # Enable CUPS printing service
  services.printing.enable = true;

  # Enable audio with PipeWire (modern replacement for PulseAudio)
  security.rtkit.enable = true;  # Realtime kit for prioritizing audio processes
  services.pipewire = {
    enable = true;
    alsa.enable = true;         # ALSA support (Advanced Linux Sound Architecture)
    alsa.support32Bit = true;   # Support for 32-bit applications
    pulse.enable = true;        # PulseAudio compatibility layer
    jack.enable = true;         # Enable JACK application support (audio production)
  };

  # Bluetooth configuration
  hardware.bluetooth.enable = true;     # Enable Bluetooth support
  services.blueman.enable = true;       # Bluetooth GUI manager
  hardware.bluetooth.powerOnBoot = true; # Turn on Bluetooth at boot

  # ==================== SECURITY & POLKIT ====================
  # Enable Polkit authentication framework (required for KDE and system administration)
  security.polkit.enable = true;

  # PAM (Pluggable Authentication Modules) configuration
  security.pam.services = {
    login.enableKwallet = true;  # Integrate with KDE Wallet
    swaylock = {};               # Add if using swaylock screen locker
  };

  # ==================== USER CONFIGURATION ====================
  # Enable Zsh shell with enhancements
  programs.zsh = {
    enable = true;
    ohMyZsh = {
      enable = true;
      plugins = [ "git" "sudo" "systemd" "docker" "kubectl" ];  # Useful plugins
      theme = "agnoster";  # Popular Zsh theme
    };
    autosuggestions.enable = true;     # Enable command suggestions
    syntaxHighlighting.enable = true;  # Enable syntax highlighting
  };

  # Define a user account
  users.users.togo-gt = {
    isNormalUser = true;       # Defines as normal user (not system user)
    description = "Togo-GT";   # User description
    extraGroups = [
      "networkmanager"         # Allow network configuration
      "wheel"                  # Allow sudo access (administrative rights)
      "input"                  # Access to input devices (mouse/keyboard)
      "docker"                 # Docker access
      "libvirtd"               # Virtualization access
    ];
    shell = pkgs.zsh;          # Set Zsh as default shell
    packages = with pkgs; [
      kdePackages.kate         # Powerful text editor from KDE
      # thunderbird           # Email client (uncomment to enable)
    ];
  };

  # Security improvement: Disabled automatic login
  services.displayManager.autoLogin.enable = false;
  # services.displayManager.autoLogin.user = "togo-gt";

  # Install Firefox web browser
  programs.firefox.enable = true;

  # ==================== XDG DESKTOP PORTAL ====================
  # XDG Desktop Portal integration (required for Wayland and app integration)
  xdg.portal = {
    enable = true;
    extraPortals = with pkgs; [
      kdePackages.xdg-desktop-portal-kde  # Qt6 version (recommended)
      xdg-desktop-portal-gtk              # GTK version for GTK applications
    ];
  };

  # Dconf support (required for GNOME/GTK apps in KDE)
  programs.dconf.enable = true;

  # ==================== NIX PACKAGE CONFIGURATION ====================
  # Allow non-free (proprietary) packages
  nixpkgs.config.allowUnfree = true;

  # Nix optimization settings
  nix.settings = {
    experimental-features = [ "nix-command" "flakes" ];  # Enable new Nix features
    auto-optimise-store = true;  # Automatically optimize store
    substituters = [  # Binary cache servers to speed up installations
      "https://cache.nixos.org"
      "https://nix-community.cachix.org"
    ];
    trusted-public-keys = [  # Trusted keys for binary caches
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };

  # Automatic garbage collection to remove old packages
  nix.gc = {
    automatic = true;           # Run automatically
    dates = "weekly";           # Run once per week
    options = "--delete-older-than 7d"; # Delete packages older than 7 days
  };

  # List of packages installed in system profile
  environment.systemPackages = with pkgs; [
    # -------------------------------
    # System utilities
    # -------------------------------
    bat          # Enhanced 'cat' with syntax highlighting
    btop         # Advanced interactive resource monitoring
    bottom       # Alternative resource monitoring for terminal
    curl         # Transfer data from URLs (HTTP, FTP, etc.)
    duf          # Disk usage monitoring with nice output
    fd           # Fast and modern replacement for 'find'
    file         # Show file type information
    git          # Version control system for code and files
    htop         # Interactive system and process monitoring
    jq           # JSON processor and manipulation tool
    neofetch     # Show system information and OS banner
    rsync        # File synchronization between systems
    tmux         # Terminal multiplexer for sessions and windows
    unzip        # Extract .zip archives
    vim          # Powerful text editor
    wget         # Download files via HTTP/FTP
    xdg-utils    # Standard desktop utilities (open files, URLs, etc.)

    # -------------------------------
    # Hardware diagnostics
    # -------------------------------
    clinfo             # OpenCL info tool for GPU compute information
    dmidecode          # Retrieve hardware information from BIOS
    glxinfo            # OpenGL information and GPU support
    inxi               # Print detailed system information
    lm_sensors         # Temperature and sensor monitoring
    nvtopPackages.full # GPU monitor for NVIDIA cards
    pciutils           # Show information about PCI devices
    smartmontools      # Disk health and S.M.A.R.T. monitoring
    vulkan-loader      # Loader for Vulkan API
    vulkan-tools       # Vulkan tools and demos

    # -------------------------------
    # Desktop / GUI support
    # -------------------------------
    kdePackages.dolphin # KDE file manager
    kdePackages.konsole # KDE terminal emulator
    libnotify           # Desktop notifications
    libva-utils         # VA-API tools for video acceleration
    ntfs3g              # NTFS filesystem support
    micro               # User-friendly and minimalist text editor

    # -------------------------------
    # Development / Programming
    # -------------------------------
    gcc       # C/C++ compiler
    nodejs    # JavaScript runtime and development tools
    python3   # Python interpreter
    rustup    # Rust toolchain installer
    fzf       # Fuzzy finder for quick file searching in terminal

    # -------------------------------
    # Gaming and optimization
    # -------------------------------
    gamemode      # Game optimization tool for Linux
    gamescope     # Steam Deck-like scaling and compositor
    lutris        # Game manager for Linux
    mangohud      # Performance overlay for games
    protonup-qt   # Manage Proton versions for Steam
    wine          # Windows compatibility layer for Linux

    # -------------------------------
    # Virtualization and containerization
    # -------------------------------
    docker-compose # Docker container management
    distrobox      # Containerized development environments
    virt-manager   # GUI for libvirt and VM management
    appimage-run   # Run AppImage files directly

    # -------------------------------
    # Network tools
    # -------------------------------
    iperf3 # Network performance measurement
    nmap   # Network scanning and security tool

    # -------------------------------
    # NVIDIA-specific tools
    # -------------------------------
    linuxPackages.nvidia_x11  # NVIDIA X11 driver for GPU
    nvidia-vaapi-driver       # NVIDIA VA-API driver for hardware acceleration

    # -------------------------------
    # Package management and Nix extensions
    # -------------------------------
    cachix    # Nix binary cache client
    nix-index # Quickly find packages in NixOS
  ];

  # ==================== ADDITIONAL SYSTEM CONFIGURATION ====================
  # Enable TRIM for SSD drives (improves performance and lifespan)
  services.fstrim.enable = true;

  # Enable early OOM daemon (handles memory shortages early)
  services.earlyoom.enable = true;

  # Flatpak support (for installing apps from Flathub)
  services.flatpak.enable = true;

  # Power management (especially useful for laptops)
  services.power-profiles-daemon.enable = true; # Recommended for KDE
  services.auto-cpufreq.enable = false;  # Disabled alternative power management
  services.tlp.enable = false;           # Disabled alternative power management

  # Steam gaming support
  programs.steam = {
    enable = true;                      # Enable Steam
    remotePlay.openFirewall = true;     # Open firewall for Remote Play
    dedicatedServer.openFirewall = true; # Open firewall for dedicated servers
  };

  # Gaming optimization
  programs.gamemode.enable = true;

  # Hardware monitoring
  services.hardware.bolt.enable = true; # Thunderbolt support

  # Virtualization support
  virtualisation = {
    docker = {
      enable = true;
      rootless = {  # Run Docker without root privileges (more secure)
        enable = true;
        setSocketVariable = true;
      };
    };
    libvirtd = {
      enable = true;
      qemu = {
        runAsRoot = true;
        swtpm.enable = true;  # Software TPM support for virtual machines
      };
    };
  };

  # Additional services
  services = {
    avahi = { # Network service discovery (mDNS)
      enable = true;
      nssmdns4 = true;  # Enable mDNS name resolution
    };
    fwupd.enable = true; # Firmware updates
    thermald.enable = true; # Thermal management for Intel CPUs
  };

  # Better font rendering
  fonts = {
    enableDefaultPackages = true;  # Enable default font packages

    packages = with pkgs; [
      noto-fonts            # Google's font family
      noto-fonts-cjk-sans   # Chinese, Japanese, Korean sans-serif fonts
      noto-fonts-emoji      # Emoji font
      nerd-fonts.fira-code  # Programming font with ligatures
      nerd-fonts.jetbrains-mono # Another programming font
    ];

    fontconfig = {
      defaultFonts = {
        monospace = [ "JetBrainsMono Nerd Font" "Noto Sans Mono" ];
        sansSerif = [ "Noto Sans" ];
        serif = [ "Noto Serif" ];
      };
    };
  };

  # ==================== Security CONFIGURATION ====================
  # Enable OpenSSH daemon (remote access via SSH)
  services.openssh.enable = true;

  # Firewall configuration
  networking.firewall = {
    allowedTCPPorts = [
      22    # SSH
      80    # HTTP
      443   # HTTPS
      27036 # Steam
      27037 # Steam
    ];
    allowedUDPPorts = [
      27031 # Steam
      27036 # Steam
      3659  # Lunar Client (Minecraft)
    ];
  };

  # Additional security measures
  security = {
    sudo = {
      wheelNeedsPassword = true; # Require password for sudo
      execWheelOnly = true;      # Only wheel group can use sudo
    };
    protectKernelImage = true; # Protect kernel from modification
    auditd.enable = true;      # System auditing
  };

  # This value determines the NixOS release from which the default settings
  # were taken. It's perfectly fine and recommended to leave this value at the
  # release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "25.05"; # Did you read the comment?
}
