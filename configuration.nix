# Edit this configuration file to define what should be installed on
# your system.  Help is available in the configuration.nix(5) man page
# and in the NixOS manual (accessible by running 'nixos-help').

{ config, pkgs, lib, ... }:

let
  # Define GPU type here (change to "amd" or "nvidia" depending on your GPU)
  # This variable allows easy switching between different GPU configurations
  gpuType = "nvidia";  # Changed from intel to nvidia
in
{
  imports =
    [ # Include the results of the hardware scan.
      # This file is auto-generated by nixos-generate-config and contains
      # hardware-specific settings like filesystems and kernel modules
      ./hardware-configuration.nix
      # Add these for better hardware support:
      <nixpkgs/nixos/modules/installer/scan/not-detected.nix>
      <nixpkgs/nixos/modules/profiles/hardened.nix>
    ];

  # ==================== BOOTLOADER CONFIGURATION ====================
  # Bootloader configuration for UEFI systems
  boot.loader.systemd-boot.enable = true;      # Use systemd-boot as bootloader (modern and simple)
  boot.loader.efi.canTouchEfiVariables = true; # Allow updating EFI boot variables (required for UEFI)

  # Use the latest Linux kernel for newest drivers and security updates
  boot.kernelPackages = pkgs.linuxPackages_latest;

  # Kernel parameters for better performance and functionality
  boot.kernelParams = [
    "quiet"           # Reduce boot noise by suppressing most log messages
    "splash"          # Show splash screen during boot
    "nvidia-drm.modeset=1"  # Enable NVIDIA DRM kernel mode setting for better graphics
    "nowatchdog"      # Disable hardware watchdog (can prevent system freezes)
    "tsc=reliable"    # Mark Time Stamp Counter as reliable (better timing)
    "nohibernate"     # Disable hibernation (saves memory and avoids issues)
    "mitigations=off" # For better performance (security trade-off)
    "preempt=full"    # Better for desktop responsiveness
    "nvidia.NVreg_PreserveVideoMemoryAllocations=1"
    "nvidia.NVreg_EnablePCIeGen3=1"
  ];

  # Kernel modules to load in initial ramdisk for early hardware access
  boot.initrd.availableKernelModules = [
    "nvme"       # NVMe SSD support
    "xhci_pci"   # USB 3.0 controller support
    "ahci"       # SATA controller support
    "usbhid"     # USB HID devices (keyboards, mice)
    "usb_storage" # USB storage devices
    "sd_mod"     # SD card reader support
  ];

  # Load these kernel modules at boot time
  boot.kernelModules = [
    "fuse"          # Filesystem in Userspace (for SSHFS, NTFS-3G, etc.)
    "v4l2loopback"  # Virtual video device (screen recording, virtual cameras)
    "snd-aloop"     # Virtual audio device (audio routing and recording)
  ];

  # ==================== NVIDIA CONFIGURATION ====================
  hardware.nvidia = {
    # Modesetting is required for Wayland and better integration
    modesetting.enable = true;
    # Power Management (saves power on laptops, disable if causing issues)
    powerManagement = {
      enable = true;
      finegrained = true;  # Better power management
    };
    # Use open-source kernel modules (NOUVEAU)? Set to false to use proprietary NVIDIA drivers.
    open = false;
    # Allow using NVIDIA Settings tool to adjust settings
    nvidiaSettings = true;
    # Fix screen tearing
    forceFullCompositionPipeline = true;
    # Prime offload for better hybrid graphics support
    prime = {
      offload = {
        enable = true;
        enableOffloadCmd = true;
      };
    };
    # Use stable NVIDIA package with current kernel
    package = config.boot.kernelPackages.nvidiaPackages.stable;
  };

  # NVIDIA persistence service for better driver stability
  services.nvidia-persistenced.enable = true;

  # ==================== NETWORK CONFIGURATION ====================
  networking.hostName = "nixos"; # Define your system's network name

  # Enable NetworkManager (recommended for both wired and wireless networks)
  networking.networkmanager.enable = true;

  # ==================== INTERNATIONALIZATION ====================
  # Set timezone to Copenhagen (Central European Time)
  time.timeZone = "Europe/Copenhagen";

  # Enable and configure NTP for time synchronization
  systemd.timesyncd = {
    enable = true;
    servers = [
      "0.dk.pool.ntp.org"
      "1.dk.pool.ntp.org"
      "2.dk.pool.ntp.org"
      "3.dk.pool.ntp.org"
    ];
  };

  i18n = {
    defaultLocale = "en_DK.UTF-8";  # Changed from en_US to en_DK

    # List of languages to support on the system
    supportedLocales = [
      "en_DK.UTF-8/UTF-8"  # Changed from en_US to en_DK
      "da_DK.UTF-8/UTF-8"  # Danish
    ];

    # Extra environment variables for fine-tuning locale settings
    extraLocaleSettings = {
      LANG = "en_DK.UTF-8";        # Changed from en_US to en_DK
      LC_CTYPE = "en_DK.UTF-8";    # Changed from en_US to en_DK
      LC_NUMERIC = "da_DK.UTF-8";  # Use Danish number formatting
      LC_TIME = "da_DK.UTF-8";     # Use Danish time format (24-hour)
      LC_MONETARY = "da_DK.UTF-8"; # Use Danish currency format
      LC_ADDRESS = "da_DK.UTF-8";  # Use Danish address formatting
      LC_IDENTIFICATION = "da_DK.UTF-8"; # Use Danish locale metadata
      LC_MEASUREMENT = "da_DK.UTF-8";    # Use Danish measurement units
      LC_PAPER = "da_DK.UTF-8";          # Use Danish paper size
      LC_TELEPHONE = "da_DK.UTF-8";      # Use Danish telephone formatting
      LC_NAME = "da_DK.UTF-8";           # Use Danish name formatting
    };
  };

  # Keyboard configuration for X11 (graphical interface)
  services.xserver.xkb = {
    layout = "dk";    # Danish keyboard layout
    variant = "";     # No special variant
  };

  # Keyboard configuration for virtual console (TTY)
  console.keyMap = "dk-latin1";  # Danish keyboard layout with Latin-1 encoding

  # ==================== GRAPHICAL ENVIRONMENT ====================
  # Enable X11 window system (required for most desktop environments)
  services.xserver.enable = true;

  # Enable MIME type database for file type associations
  xdg.mime.enable = true;

  # Enable KDE Plasma Desktop Environment with SDDM display manager
  services.displayManager.sddm = {
    enable = true;
    wayland.enable = true; # Enable Wayland support (next-gen display protocol)
  };

  # Enable KDE Plasma 6 desktop
  services.desktopManager.plasma6.enable = true;

  # Environment variables for Wayland with NVIDIA
  environment.sessionVariables = {
    # Fix Wayland issues with NVIDIA
    GBM_BACKEND = "nvidia-drm";
    __GLX_VENDOR_LIBRARY_NAME = "nvidia";
    WLR_NO_HARDWARE_CURSORS = "1";
  };

  # ==================== HARDWARE SUPPORT ====================
  # Modern hardware acceleration settings
  hardware.graphics = {
    enable = true;
    enable32Bit = true;  # Enable 32-bit support (for legacy applications)

    # Graphics acceleration packages
    extraPackages = with pkgs; [
      vaapiVdpau       # VA-API implementation using VDPAU
      libvdpau-va-gl   # VDPAU driver with VA-API support
      mesa             # Open-source graphics driver
    ] ++ lib.optionals (gpuType == "nvidia") [  # NVIDIA-specific packages
      nvidia-vaapi-driver  # VA-API implementation for NVIDIA hardware
    ];

    # 32-bit versions of graphics packages
    extraPackages32 = with pkgs.pkgsi686Linux; [
      libva            # Video Acceleration API
      mesa             # Open-source graphics driver (32-bit)
    ] ++ lib.optionals (gpuType == "nvidia") [  # NVIDIA-specific 32-bit packages
      nvidia-vaapi-driver  # VA-API implementation for NVIDIA hardware (32-bit)
    ];
  };

  # Enable CUPS printing service
  services.printing.enable = true;

  # Enable audio with PipeWire (modern replacement for PulseAudio)
  security.rtkit.enable = true;  # Realtime kit for prioritizing audio processes
  services.pipewire = {
    enable = true;
    alsa.enable = true;         # ALSA support (Advanced Linux Sound Architecture)
    alsa.support32Bit = true;   # Support for 32-bit applications
    pulse.enable = true;        # PulseAudio compatibility layer
    jack.enable = true;         # Enable JACK application support (audio production)
    wireplumber.enable = true;  # Session manager
    config.pipewire = {
      "context.properties" = {
        "link.max-buffers" = 16;
        "log.level" = 2;
      };
    };
  };

  # Bluetooth configuration
  hardware.bluetooth.enable = true;     # Enable Bluetooth support
  services.blueman.enable = true;       # Bluetooth GUI manager
  hardware.bluetooth.powerOnBoot = true; # Turn on Bluetooth at boot

  # ==================== security & POLKIT ====================
  # Enable Polkit authentication framework (required for KDE and system administration)
  security.polkit.enable = true;

  # PAM (Pluggable Authentication Modules) configuration
  security.pam.services = {
    login.enableKwallet = true;  # Integrate with KDE Wallet
    swaylock = {};               # Add if using swaylock screen locker
  };

  # ==================== USER CONFIGURATION ====================
  # Enable Zsh shell with enhancements
  programs.zsh = {
    enable = true;
    ohMyZsh = {
      enable = true;
      plugins = [ "git" "sudo" "systemd" "docker" "kubectl" ];  # Useful plugins
      theme = "agnoster";  # Popular Zsh theme
    };
    autosuggestions.enable = true;     # Enable command suggestions
    syntaxHighlighting.enable = true;  # Enable syntax highlighting
    interactiveShellInit = ''
      zstyle ':completion:*' menu select
      zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
    '';
  };

  # Set ZSH as default system shell
  users.defaultUserShell = pkgs.zsh;
  environment.shells = with pkgs; [ zsh ];

  # Define a user account
  users.users.togo-gt = {
    isNormalUser = true;       # Defines as normal user (not system user)
    description = "Togo-GT";   # User description
    extraGroups = [
      "networkmanager"         # Allow network configuration
      "wheel"                  # Allow sudo access (administrative rights)
      "input"                  # Access to input devices (mouse/keyboard)
      "docker"                 # Docker access
      "libvirtd"               # Virtualization access
    ];
    shell = pkgs.zsh;          # Set Zsh as default shell
    packages = with pkgs; [
      kdePackages.kate         # Powerful text editor from KDE
      # thunderbird           # Email client (uncomment to enable)
    ];
  };

  # Security improvement: Disabled automatic login
  services.displayManager.autoLogin.enable = false;
  # services.displayManager.autoLogin.user = "togo-gt";

  # Install Firefox web browser
  programs.firefox.enable = true;

  # ==================== XDG DESKTOP PORTAL ====================
  # XDG Desktop Portal integration (required for Wayland and app integration)
  xdg.portal = {
    enable = true;
    extraPortals = with pkgs; [
      kdePackages.xdg-desktop-portal-kde  # Qt6 version (recommended)
      xdg-desktop-portal-gtk              # GTK version for GTK applications
    ];
  };

  # Dconf support (required for GNOME/GTK apps in KDE)
  programs.dconf.enable = true;

  # ==================== NIX PACKAGE CONFIGURATION ====================
  # Allow non-free (proprietary) packages
  nixpkgs.config.allowUnfree = true;
  nixpkgs.config.allowAliases = false;

  # Nix optimization settings
  nix.settings = {
    experimental-features = [ "nix-command" "flakes" ];  # Enable new Nix features
    auto-optimise-store = true;  # Automatically optimize store
    substituters = [  # Binary cache servers to speed up installations
      "https://cache.nixos.org"
      "https://nix-community.cachix.org"
    ];
    trusted-public-keys = [  # Trusted keys for binary caches
      "cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY="
      "nix-community.cachix.org-1:mB9FSh9qf2dCimDSUo8Zy7bkq5CX+/rkCWyvRCYg3Fs="
    ];
  };

  # Automatic garbage collection to remove old packages
  nix.gc = {
    automatic = true;           # Run automatically
    dates = "weekly";           # Run once per week
    options = "--delete-older-than 7d"; # Delete packages older than 7 days
  };

  environment.systemPackages = with pkgs; [
  # ==========================================================================
  # SYSTEM & COMMAND LINE UTILITIES
  # ==========================================================================

  # --------------------------------------------------------------------------
  # File Management & Navigation
  # --------------------------------------------------------------------------
  broot          # Terminal file browser with tree view and fuzzy search
  dust           # More intuitive version of du with immediate overview
  duf            # Disk usage/free utility with better formatting
  fselect        # Find files with SQL-like queries for advanced searching
  ncdu           # NCurses disk usage analyzer with interactive interface
  zoxide         # Smarter cd command that learns your frequently used directories

  # --------------------------------------------------------------------------
  # Text Processing & Editors
  # --------------------------------------------------------------------------
  bat            # Cat clone with syntax highlighting and git integration
  micro          # Modern terminal text editor with intuitive keybindings
  neovim         # Vim-fork focused on extensibility and usability
  ripgrep        # Extremely fast recursive grep alternative
  ripgrep-all    # Ripgrep that searches in PDFs, Word docs, and other file types

  # --------------------------------------------------------------------------
  # System Monitoring & Process Management
  # --------------------------------------------------------------------------
  btop           # Modern resource monitor with customizable UI
  bottom         # Cross-platform graphical process/system monitor
  htop           # Interactive process viewer with tree view and filtering
  glances        # Cross-platform system monitoring tool with web interface
  iotop          # I/O usage monitoring to identify disk-intensive processes
  nethogs        # Bandwidth monitoring per process (grouped by network interface)
  strace         # System call tracer for debugging
  ltrace         # Library call tracer

  # --------------------------------------------------------------------------
  # Backup & Synchronization
  # --------------------------------------------------------------------------
  borgbackup     # Deduplicating backup program with compression and encryption
  rsnapshot      # Filesystem snapshot utility based on rsync for backups
  rsync          # Fast, versatile file copying tool with delta-transfer algorithm

  # --------------------------------------------------------------------------
  # Utilities & Productivity
  # --------------------------------------------------------------------------
  git            # Distributed version control system
  curl           # Transfer data from/to servers supporting various protocols
  curlie         # User-friendly curl wrapper with sane defaults and formatting
  fzf            # Fuzzy finder for command line with preview capabilities
  starship       # Fast, customizable shell prompt with extensive theming
  taskwarrior    # Command-line task management with filtering and reporting
  tldr           # Simplified, practical man pages with examples
  tmux           # Terminal multiplexer for session persistence and window management
  tmuxp          # Tmux session manager with YAML configuration
  watch          # Execute program periodically with full-screen output
  zsh            # Z shell with extensive customization and plugin support

  # --------------------------------------------------------------------------
  # Miscellaneous Tools
  # --------------------------------------------------------------------------
  aircrack-ng    # WiFi security auditing tools (WEP/WPA cracking)
  cmatrix        # Falling matrix animation in terminal (for fun)
  file           # Determine file type using magic numbers
  fortune        # Display random quotes, jokes, or wisdom
  openssl        # Cryptography and SSL/TLS toolkit for secure communications
  iftop          # Display bandwidth usage on network interfaces

  # ==========================================================================
  # NETWORKING & Security
  # ==========================================================================

  # --------------------------------------------------------------------------
  # Network Diagnostics
  # --------------------------------------------------------------------------
  iperf3         # Network bandwidth measurement tool
  nmap           # Network discovery and security auditing with scripting
  masscan        # Mass IP port scanner designed for Internet-wide scanning
  tcpdump        # Command-line packet analyzer with powerful filtering
  tcpflow        # TCP flow recorder that reconstructs actual data streams
  traceroute     # Trace network path to host showing response times

  # --------------------------------------------------------------------------
  # Security & Pentesting
  # --------------------------------------------------------------------------
  ettercap       # Comprehensive suite for MITM attacks on LAN
  openvpn        # Robust VPN solution with SSL/TLS encryption
  wireguard-tools # Fast, modern VPN implementation with minimal overhead

  # --------------------------------------------------------------------------
  # Container & Orchestration Tools
  # --------------------------------------------------------------------------
  podman         # Daemonless container engine with rootless capabilities

  # ==========================================================================
  # DEVELOPMENT & DEVOPS
  # ==========================================================================

  # --------------------------------------------------------------------------
  # Infrastructure as Code
  # --------------------------------------------------------------------------
  ansible        # Automation for configuration management and deployment
  packer         # Machine image creation for multiple platforms
  terraform      # Infrastructure provisioning tool with state management

  # --------------------------------------------------------------------------
  # Containerization
  # --------------------------------------------------------------------------
  docker         # Container platform for building and sharing applications
  docker-compose # Multi-container application management with YAML files

  # --------------------------------------------------------------------------
  # Programming Languages & Runtimes
  # --------------------------------------------------------------------------
  go             # Go programming language for efficient system programming
  nodejs         # JavaScript runtime built on Chrome's V8 engine
  perl           # Perl programming language with strong text processing
  python3        # Python 3 interpreter for scripting and application development
  python3Packages.pip # Python package installer for PyPI packages
  pipx           # Install and run Python applications in isolated environments
  rustup         # Rust toolchain installer and manager with component selection

  # --------------------------------------------------------------------------
  # Build Tools & Compilers
  # --------------------------------------------------------------------------
  cmake          # Cross-platform build system generator
  gcc            # GNU Compiler Collection for C, C++, and other languages

  # ==========================================================================
  # GUI APPLICATIONS
  # ==========================================================================

  # --------------------------------------------------------------------------
  # Browsers & Communication
  # -----------
